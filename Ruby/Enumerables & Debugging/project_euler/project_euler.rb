# ⏱ 60 mins

# Problem 1 
#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

def problem1
  sum = 0
  iterator = 0
  while iterator < 1000
    if multiple?(iterator)
      sum += iterator
    end
    iterator += 1
  end
  return sum
end

def multiple?(num)
  return true if num % 3 == 0 || num % 5 == 0
  return false
end

# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def problem2
  series = [1,2]
  num = 0
  sum = 0
  while num < 4000000
    num = series[-1] + series[-2]
    sum += num if num.even?
    series << num
  end
  print sum
end

# Problem 3
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def problem3
  num = 600851475143
  factors = []
  fact = 2
  while fact < num
    factors << fact if (num%fact).zero?
    # print "#{factors}\n"
    fact += 1    
    if factors.inject(&:*) == num
      return factors.last
    end
  end
end

def prime?(num)
  (2...num).each do |fact|
    return false if (num%fact).zero?
  end
  return true
end

# Problem 4
# A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

# Find the largest palindrome made from the product of two 3-digit numbers.

def problem4
  num1 = 999
  palindromic_nums = []
  while num1 >= 1
    num2 = 999
    while num2 >= 1
      palindrome = (num1 * num2)
      palindromic_nums << (num1 * num2) if palindrome.to_s == palindrome.to_s.reverse
      num2 -= 1
    end
    num1 -= 1
  end
  palindromic_nums.max
end

# Problem 5
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def problem5
  num_range = (1..20).to_a
  num = 10
  while true
    return num if num_range.all? { |fact| (num%fact).zero? }
    num += 1
  end
end

# Problem 6
# The sum of the squares of the first ten natural numbers is,

# 12+22+...+102=385
# The square of the sum of the first ten natural numbers is,

# (1+2+...+10)2=552=3025
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.

# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

def problem6
  sum_of_square = 0
  square_of_sum = 0
  (1..100).each do |num|
    square_of_sum += num
    sum_of_square = sum_of_square + (num * num)
  end
  return square_of_sum**2 - sum_of_square
end

# Problem 7
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

def problem7
  primes = []
  i = 0
  while true
    break if primes.length == 10001
    primes << i if prime?(i)
    i += 1
  end
  return primes.last
end

# Problem 8
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

def problem8
  num  = "731671765313306249192251196744265747423553491949349698352031277450632623957016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

  num_arr = num.split("").map(&:to_i)

  i = 0
  sum = 0
  while i < num.length-13
    product = 1
    j = i 
    while j < j+12
      product *= num_arr[j]
    end
    sum = product if product > sum
  end
  return sum
end

